$primaryColor: #adadad;
$secondaryColor: #242424;

@mixin main-font($weight) {
  font-family: "Montserrat", sans-serif;
  font-weight: $weight;
}


// Convertation px to rem settings
$rem-baseline: 16px;
$rem-fallback: false !default;
$rem-px-only: false !default;
@function rem-separator($list, $separator: false) {
  @if $separator == "comma" or $separator == "space" {
    @return append($list, null, $separator);
  }

  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
      $result: append($result, $value / 1rem * $rem-baseline + 0px, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
      $result: append($result, $value / $rem-baseline + 0rem, $separator);
    } @else if type-of($value) == "list" {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == "map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}

// Responsive settings

$desktop-high: 1520px;
$desktop-small: 1200px;
$tablet-high: 991px;
$mobile: 767px;
$small-mobile: 490px;
$responsive-height: 680px;

@mixin desktop-high {
  @media only screen and (max-width: #{$desktop-high}) {
    @content;
  }
}
@mixin responsive-height {
  @media only screen and (max-height: #{$responsive-height}) {
    @content;
  }
}
@mixin desktop-small {
  @media only screen and (max-width: #{$desktop-small}) {
    @content;
  }
}
@mixin tablet-high {
  @media only screen and (max-width: #{$tablet-high}) {
    @content;
  }
}
@mixin mobile {
  @media only screen and (max-width: #{$mobile}) {
    @content;
  }
}
@mixin small-mobile {
  @media only screen and (max-width: #{$small-mobile}) {
    @content;
  }
}

@mixin base-sizes() {
  &__size {
    &_auto {
      width: auto;
    }

    &_xs {
      width: rem(85px);
    }

    &_s {
      width: rem(120px);
    }

    &_m {
      width: rem(190px);
    }

    &_l {
      width: rem(260px);
      @include mobile {
        width: 100%;
      }
    }

    &_xl {
      width: rem(400px);
      @include mobile {
        width: 100%;
      }
    }

    &_xxl {
      width: rem(450px);
      @include mobile {
        width: 100%;
      }
    }
  }
}
